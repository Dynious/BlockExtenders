import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

ext.env = System.getenv()
ext.cclVersion = "1.1.1.95"

version = "1.0.8b"
group = "com.dynious.refinedrelocation"
archivesBaseName = "RefinedRelocation-1.7.10"

if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

minecraft {
    version = "1.7.10-10.13.4.1492-1.7.10"
    
    replaceIn "lib/Reference.java"
    replace "@VERSION@", project.version
}

repositories {
    mavenCentral()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name "waila"
        url "http://mobiusstrip.eu/maven"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
    ivy {
        name "InventoryTweaks"
        artifactPattern "http://build.technicpack.net/job/Inventory-Tweaks/[revision]/artifact/build/libs/[module]-[classifier]-1.58-[revision].[ext]"
    }
    ivy {
        name "IronChest"
        artifactPattern "http://files.minecraftforge.net/maven/cpw/mods/[module]/[revision]/[module]-[revision]-[classifier].[ext]"
    }
    ivy {
        name 'CoFHLib'
        artifactPattern "http://addons-origin.cursecdn.com/files/2246/918/[module]-[revision]-[classifier].[ext]"
    }
}

dependencies {
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"
    compile "net.industrial-craft:industrialcraft-2:2.2.764-experimental:api"
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:api"
    compile "appeng:appliedenergistics2:rv2-stable-10:dev"
    compile "com.pahimar.ee3:EquivalentExchange3:1.7.10-0.3.507:dev"
    compile "mcp.mobius.jabba:Jabba:1.2.1a_1.7.10:dev"
    compile name: 'buildcraft', version: '7.0.9', classifier: "dev", ext: 'jar'
    compile name: 'InventoryTweaks', version: '147', classifier: "deobf", ext: 'jar'
    compile name: 'ironchest', version: '1.7.10-6.0.62.742', classifier: "deobf", ext: 'jar'
    compile name: 'CoFHLib', version: '[1.7.10]1.0.3-175', classifier: "dev", ext: 'jar'
}

/*
apply from: 'downloader.gradle'

addGitDep("cofh","https://github.com/CoFH/CoFHLib.git","fc5d6c4377ef3d4f773cbeae009be85d6196e726", "cofh/src/main/java", "cofh/api/**", "cofh/api/world")
addGitDep("ic","https://github.com/progwml6/ironchest.git","ec370ea8c666fab775d320e365aedc8b49ffc7c9", "ic/src/main/java", "cpw/**")

ideaModule.dependsOn(getDeps)
compileApiJava.dependsOn(getDeps)

afterEvaluate {
    sourceMainJava.dependsOn(getDeps)
}
*/

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'dependancies.info'
                
        // replace version and mcversion
        filter(ReplaceTokens, tokens: [VERSION: project.version, MCVERSION: project.minecraft.version, CCLVERSION: project.cclVersion])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'dependancies.info'
    }
}

jar {
    manifest {
        attributes("FMLCorePlugin": "com.dynious.refinedrelocation.asm.LoadingPlugin", "FMLCorePluginContainsFMLMod": "true", "FMLAT": "RefinedRelocation_at.cfg")
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
	
	manifest {
        attributes("FMLCorePlugin": "com.dynious.refinedrelocation.asm.LoadingPlugin", "FMLCorePluginContainsFMLMod": "true", "FMLAT": "RefinedRelocation_at.cfg")
    }
}

task apiZip(type: Zip) {
    from(sourceSets.main.java) {
        include 'com/dynious/refinedrelocation/api/**'
    }
    //destinationDir = file 'build/lib'
    classifier = 'api'
}

apiZip.mustRunAfter(jar)

artifacts {
    archives deobfJar
    archives apiZip
}
